VERSION = 2.12
DEFAULT_AVAILABLE_TARGETS = ec616_0h00 ec616_1h10

eq = $(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))

ifndef TARGET
$(warning "No TARGET specified. will use default ec616_0h00")
TARGET ?= ec616_0h00
endif

ifndef $(or RELEASE,DEBUG)
DEBUG = 5
endif


### Expand '*' available targets from example makefiles
TARGETS := $(subst *,%,$(filter %*,$(AVAILABLE_TARGETS)))
AVAILABLE_TARGETS := $(filter-out %*,$(AVAILABLE_TARGETS))
TARGETS := $(foreach target,$(TARGETS),$(filter $(TARGETS),$(DEFAULT_AVAILABLE_TARGETS)))
AVAILABLE_TARGETS += $(TARGETS)
AVAILABLE_TARGETS := $(sort $(AVAILABLE_TARGETS))
SELECTED_TARGET = $(strip $(foreach target,$(AVAILABLE_TARGETS),$(if $(call eq,qcx212_0h00,qcx212_0h00),qcx212_0h00)))
###

ifeq ($(SELECTED_TARGET),)
$(info The selected target "qcx212_0h00" is not supported or not available)
$(error Please set TARGET to one value from the list above: $(AVAILABLE_TARGETS))
endif

ifeq ($(V),1)
Q :=
ECHO := @true
else
Q := @
ECHO := @echo
endif

#-------------------------------------------------------------------------------
#		Setup cross-compilation tools for GCC
#-------------------------------------------------------------------------------
ifeq ($(TOOLCHAIN),GCC)

# Tool suffix when cross-compiling
GCCLIB_PATH ?= C:/gcc_arm

CROSS_COMPILE := $(GCCLIB_PATH)/bin/arm-none-eabi-

# Compilation tools
CC = $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)ld
SIZE = $(CROSS_COMPILE)size
STRIP = $(CROSS_COMPILE)strip
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
GDB = $(CROSS_COMPILE)gdb
NM = $(CROSS_COMPILE)nm
AR = $(CROSS_COMPILE)ar

# Setup compilation params
CFLAGS_CPU      ?= -mcpu=cortex-m3 -mthumb -mslow-flash-data
CFLAGS_OPTION   ?= -std=gnu99 -nostartfiles -mapcs-frame -specs=nano.specs
CFLAGS_OPTIMIZE ?= -Os -ffunction-sections -fdata-sections -fno-isolate-erroneous-paths-dereference -fno-inline -freorder-blocks-algorithm=stc
CFLAGS_ANALYSIS ?= #-fanalyzer 
CFLAGS_WARNING  ?= -Wall -Wno-format
CFLAGS_DEBUG    ?= -gdwarf-2

# Trace level used for compilation
# (can be overriden by adding TRACE_LEVEL=#number to the command-line)
# TRACE_LEVEL_DEBUG      5
# TRACE_LEVEL_INFO       4
# TRACE_LEVEL_WARNING    3
# TRACE_LEVEL_ERROR      2
# TRACE_LEVEL_FATAL      1
# TRACE_LEVEL_NO_TRACE   0
ifdef DEBUG
TRACE_LEVEL ?= 5
CFLAGS_DEFS += -DTRACE_LEVEL=$(TRACE_LEVEL)
CFLAGS += -g3
CFLAGS_ASM += -g3
else
TRACE_LEVEL ?= 4
CFLAGS_DEFS += -DNDEBUG -DTRACE_LEVEL=$(TRACE_LEVEL)
endif

# compiler flags
CFLAGS += $(CFLAGS_CPU) $(CFLAGS_OPTION) $(CFLAGS_OPTIMIZE) $(CFLAGS_WARNING) $(CFLAGS_DEBUG) $(CFLAGS_ANALYSIS)

CFLAGS_ASM = -Wall -D__ASSEMBLY__ -mthumb -gdwarf-2 #-mthumb-interwork
CFLAGS_DEFS += -DSOFTPACK_VERSION="\"$(SOFTPACK_VERSION)\"" -DHAVE_STRUCT_TIMESPEC

DEPFLAGS = -MMD -MP -MT $(basename $@).o -MF $(basename $@).d 

# linker flags
LDFLAGS = -specs=nano.specs -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -lc -lm -Wl,--print-memory-usage

endif